type Domain @entity {
  id: ID!
  name: String
  labelName: String
  labelhash: Bytes
  parent: Domain
  subdomains: [Domain!]! @derivedFrom(field: "parent")
  subdomainCount: Int!
  resolvedAddress: Account
  resolver: Resolver
  ttl: BigInt
  isMigrated: Boolean!
  createdAt: BigInt!
  owner: Account!
  registrant: Account
  wrappedOwner: Account
  expiryDate: BigInt
  registration: Registration @derivedFrom(field: "domain")
  wrappedDomain: WrappedDomain @derivedFrom(field: "domain")
  events: [DomainEvent!]! @derivedFrom(field: "domain")
}

type DomainEvent @entity {
  id: ID!
  domain: Domain!
  blockNumber: Int!
  transactionID: Bytes!
  transfer: Transfer
  newOwner: NewOwner
  newResolver: NewResolver
  newTTL: NewTTL
  wrappedTransfer: WrappedTransfer
  wrappedName: NameWrapped
  wrappedExpiryDate: BigInt
  unwrappedName: NameUnwrapped
  fusesSet: FusesSet
  expiryExtended: ExpiryExtended
}

type Transfer @entity {
  id: ID!
  domain: Domain!
  blockNumber: Int!
  transactionID: Bytes!
  transferOwner: Account!
}

type NewOwner @entity {
  id: ID!
  parentDomain: Domain!
  domain: Domain!
  blockNumber: Int!
  transactionID: Bytes!
  newOwner: Account!
}

type NewResolver @entity {
  id: ID!
  domain: Domain!
  blockNumber: Int!
  transactionID: Bytes!
  newResolver: Resolver!
}

type NewTTL @entity {
  id: ID!
  domain: Domain!
  blockNumber: Int!
  transactionID: Bytes!
  newTTL: BigInt!
}

type WrappedTransfer @entity {
  id: ID!
  domain: Domain!
  blockNumber: Int!
  transactionID: Bytes!
  wrappedTransferOwner: Account!
}

type NameWrapped @entity {
  id: ID!
  domain: Domain!
  blockNumber: Int!
  transactionID: Bytes!
  name: String
  wrappedFuses: Int!
  owner: Account!
  wrappedExpiryDate: BigInt!
}

type NameUnwrapped @entity {
  id: ID!
  domain: Domain!
  blockNumber: Int!
  transactionID: Bytes!
  unwrappedOwner: Account!
}

type FusesSet @entity {
  id: ID!
  domain: Domain!
  blockNumber: Int!
  transactionID: Bytes!
  fusesSet: Int!
}

type ExpiryExtended @entity {
  id: ID!
  domain: Domain!
  blockNumber: Int!
  transactionID: Bytes!
  expiryDate: BigInt!
}

type Registration @entity {
  id: ID!
  domain: Domain! @unique
  registrationDate: BigInt!
  expiryDate: BigInt!
  cost: BigInt
  registrant: Account!
  labelName: String
  events: [RegistrationEvent!]! @derivedFrom(field: "registration")
}

type RegistrationEvent @entity {
  id: ID!
  registration: Registration!
  blockNumber: Int!
  transactionID: Bytes!
  nameRegistered: NameRegistered
  nameRenewed: NameRenewed
  nameTransferred: NameTransferred
  wrappedDomain: WrappedDomain
}

type NameRegistered @entity {
  id: ID!
  registration: Registration!
  blockNumber: Int!
  transactionID: Bytes!
  registrant: Account!
  expiryDate: BigInt!
}

type NameRenewed @entity {
  id: ID!
  registration: Registration!
  blockNumber: Int!
  transactionID: Bytes!
  expiryDate: BigInt!
}

type NameTransferred @entity {
  id: ID!
  registration: Registration!
  blockNumber: Int!
  transactionID: Bytes!
  newOwner: Account!
}

type WrappedDomain @entity {
  id: ID!
  domain: Domain! @unique
  expiryDate: BigInt!
  fuses: Int!
  owner: Account!
  name: String
}

type Account @entity {
  id: ID!
  domains: [Domain!]! @derivedFrom(field: "owner")
  wrappedDomains: [WrappedDomain!] @derivedFrom(field: "owner")
  registrations: [Registration!] @derivedFrom(field: "registrant")
}

type Resolver @entity {
  id: ID!
  domain: Domain
  address: Bytes!
  addr: Account
  contentHash: Bytes
  texts: [String!]
  coinTypes: [String!]
  events: [ResolverEvent!]! @derivedFrom(field: "resolver")
}

type ResolverEvent @entity {
  id: ID!
  resolver: Resolver!
  blockNumber: Int!
  transactionID: Bytes!
  addrChanged: AddrChanged
  multicoinAddrChanged: MulticoinAddrChanged
  nameChanged: NameChanged
  abiChanged: AbiChanged
  pubkeyChanged: PubkeyChanged
  textChanged: TextChanged
  contenthashChanged: ContenthashChanged
  interfaceChanged: InterfaceChanged
  authorisationChanged: AuthorisationChanged
  versionChanged: VersionChanged
}

type AddrChanged @entity {
  id: ID!
  resolver: Resolver!
  blockNumber: Int!
  transactionID: Bytes!
  addr: Account!
}

type MulticoinAddrChanged @entity {
  id: ID!
  resolver: Resolver!
  blockNumber: Int!
  transactionID: Bytes!
  coinType: BigInt!
  addr: Bytes!
}

type NameChanged @entity {
  id: ID!
  resolver: Resolver!
  blockNumber: Int!
  transactionID: Bytes!
  name: String!
}

type AbiChanged @entity {
  id: ID!
  resolver: Resolver!
  blockNumber: Int!
  transactionID: Bytes!
  contentType: BigInt!
}

type PubkeyChanged @entity {
  id: ID!
  resolver: Resolver!
  blockNumber: Int!
  transactionID: Bytes!
  x: Bytes!
  y: Bytes!
}

type TextChanged @entity {
  id: ID!
  resolver: Resolver!
  blockNumber: Int!
  transactionID: Bytes!
  key: String!
  value: String
}

type ContenthashChanged @entity {
  id: ID!
  resolver: Resolver!
  blockNumber: Int!
  transactionID: Bytes!
  hash: Bytes!
}

type InterfaceChanged @entity {
  id: ID!
  resolver: Resolver!
  blockNumber: Int!
  transactionID: Bytes!
  interfaceID: Bytes!
  implementer: Bytes!
}

type AuthorisationChanged @entity {
  id: ID!
  resolver: Resolver!
  blockNumber: Int!
  transactionID: Bytes!
  owner: Bytes!
  target: Bytes!
  isAuthorized: Boolean!
}

type VersionChanged @entity {
  id: ID!
  resolver: Resolver!
  blockNumber: Int!
  transactionID: Bytes!
  version: BigInt!
}
